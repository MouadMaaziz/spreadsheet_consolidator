""" 
    This script is designed by Mouad Maaziz to process and organize data from spreadsheets generated by ArcGIS closestFacility
which calculates the shortes distance between 11k locality to various services, using a naming convention.
The spreadsheets should be named in the format "service_localityType_year.xls" where "service" is the type of service,
"localityType" is the type of locality, and "year" is the year of data collection. 
    The script will extract the service, the corresponding id of the facility, locality type, and year information from the 
spreadsheet and use this information to group and merge the data from the spreadsheets. The script will be able to group 
the spreadsheets by their service, locality type, and year and merge the data from all the spreadsheets into a single spreadsheet.
"""

import pandas as pd
import os, sys
import glob

# Setting the path to the directory containing the spreadsheets and the directory for the results.
#pwd = os.path.join(os.path.dirname(os.path.abspath(__file__)),'input')  
pwd = data_file = os.path.join(sys._MEIPASS, 'input')
results_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'results')
                          
# Function to extract the year and service from the spreadsheet name
def extract_year_service(spreadsheet):
    service,_,year = spreadsheet.split("_")[-3:]
    return service, year[:4]

def service_dirs():
    """ 
    This function is built to:
    1. merge douars with sous_douars into one list per year and per service,
    2. move spreadsheets into different directories accordingly to the type of service 
    """
    data = {}
    # Iterating over the spreadsheets in the directory
    for file_path in glob.glob(f"{pwd}/*.xls*"):
        spreadsheet_name = os.path.basename(file_path)
        service, year = extract_year_service(spreadsheet_name)
        
        # read the file and only take the needed fields.
        with open(file_path, 'rb') as file:
            df = pd.read_excel(file, usecols=['Name','Total_Length'], dtype={'Name': str, 'Total_Length': float})
        
        # creating a directory for the service if it does not exist.
        if not os.path.exists(results_dir):
            os.mkdir(results_dir)

        if not os.path.exists(os.path.join(results_dir, f'{service}')):
            os.mkdir(os.path.join(results_dir, f'{service}'))

        # storing the dataframe into a dictionary
        if (service,year) in data: # If this evaluate to true, then the opposite locality type is there.
            data[(service,year)] = pd.concat([data[(service,year)],df], ignore_index=True)
        else:
            data[(service,year)] = df

    # cleaning the data and saving the final spreadsheet.
    for key in data.keys():
        df = data[key]
        service, year = key
        df[['Code_localite', f'Code_etab_{service}_{year}']] = df['Name'].str.split(' - ', n=1, expand=True)
        df[f'{service}_{year}'] = df['Total_Length']
        def type_localite(x):  return "Douar" if len(x)==12 else "Sous-Douar"
        df['type'] = df['Code_localite'].apply(type_localite)
        df.drop(columns='Name', inplace=True)
        df = df[['type', 'Code_localite', f'Code_etab_{service}_{year}', f'{service}_{year}']]
        df.to_excel(os.path.join(results_dir,service, f"{service}_{year}.xlsx"))
        print(f"passed {service}_{year}")


def file_per_service():
    """ Create a spreadsheet for each service and save it in the result directory"""
    for service in os.listdir(results_dir):
        # No point of using glob here since all the files within each folder are .xls.
        if os.path.isdir(os.path.join(results_dir, service)):
            print(f"executing {service}...")
            files = os.listdir(os.path.join(results_dir, service)) 
            dfs = [pd.read_excel(os.path.join(results_dir, service, f), dtype=object) for f in files]
            results=pd.DataFrame(dfs[0])
            for df in (dfs[1:]):
                results = pd.merge(results, df.iloc[:,2:], on='Code_localite', how='left')
                results.drop_duplicates(inplace=True)
            results.to_excel(os.path.join(results_dir, f"{service}.xlsx"), index=False)


def consolidate():
    files = [x for x in glob.glob(f"{results_dir}/*.xls*")]
    dfs = [pd.read_excel(os.path.join(results_dir, f), dtype=object) for f in files]
    results = pd.DataFrame(dfs[0])
    for df in (dfs[1:]):
        results = pd.merge(results, df.iloc[:,2:], on='Code_localite', how='left')
        results.drop_duplicates(inplace=True)  
    results.to_excel(os.path.join(results_dir, f"services_16_20.xlsx"), index=False)
    

def main():
    print("Did you make sure that:\n1.The files' format is:\tservice_localiteType_year.xls/xlsx\n2.This script is located next to the 'input' directory containing the excel files.")
    if (input("confirm [Y] Yes  [N] No ?  ")[0].lower()=='y'):
        print("Launching ...")
        service_dirs()
        print("=======\tCreated service dirs")
        file_per_service()
        print("=======\tfinich file_per_service")
        consolidate()
        print("=======\tSuccessful")
        print("============\tThank you for using this script, hope it helped\t=================")


if __name__ == '__main__':
    main()
    
